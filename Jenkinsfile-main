pipeline {
    agent {
        label 'AGENT-1'
    }
    options{
        timeout(time: 10, unit: 'MINUTES')
        disableConcurrentBuilds()
    }
    parameters{
        booleanParam(name: 'deploy', defaultValue: false, description: 'Select to deploy or not')
    }
    environment{
        appVersion = ''
        region = 'us-east-1'
        account_id = '532897706341'
        project = 'expense'
        environment = 'dev'
        component = 'backend'
    }
    stages {
        stage('Read the version') {
            steps {
                script{
                    def packageJson = readJSON file: 'package.json'
                    appVersion = packageJson.version
                    echo "App version: ${appVersion}"
                }
            }
        }
        stage('Install Dependencies') {
            steps {
                sh 'npm install'
            }
        }
        // stage('SonarQube analysis') {
        //     environment {
        //         SCANNER_HOME = tool 'Sonar-6.0'
        //     }
        //     steps {
        //         withSonarQubeEnv('sonar6.0') {
        //             sh '$SCANNER_HOME/bin/sonar-scanner'
        //         }
        //     }
        // }
        // stage('SQuality Gate') {
        //     steps {
        //         timeout(time: 5, unit: 'MINUTES') {
        //         waitForQualityGate abortPipeline: true
        //         }
        //     }
        // }
        stage('Docker Build') {
            steps {
                withAWS(region: 'us-east-1', credentials: 'aws-cred') {
                    sh """
                    aws ecr get-login-password --region ${region} | docker login --username AWS --password-stdin ${account_id}.dkr.ecr.us-east-1.amazonaws.com
                    docker build -t ${account_id}.dkr.ecr.us-east-1.amazonaws.com/${project}/${component}:${appVersion} .

                    docker images

                    docker push ${account_id}.dkr.ecr.us-east-1.amazonaws.com/${project}/${component}:${appVersion}
                    
                    """
                }
            }
        }
        stage('Deploy') {
            when {
                expression {params.deploy}
            }
            steps {
                build job: 'backend-cd', parameters: [
                    string(name: 'version', value: "${appVersion}")
                    string(name: 'ENVIRONMENT', value: "dev")
                ], wait: true
            }
            // steps {
            //     withAWS(region: 'us-east-1', credentials: 'aws-cred') {
            //         sh """
            //             aws eks update-kubeconfig --region ${region}  --name ${project}-${environment}
            //             cd helm
            //             sed -i 's/IMAGE_VERSION/${appVersion}/g' values-${environment}.yaml
            //             helm upgrade --install ${component} -n ${project} -f values-${environment}.yaml .
            //         """
            //     }              
            // }
        }
    }

    post {
        always{
            echo "This sections runs always"
            deleteDir()
        }
        success{
            echo "This section run when pipeline success"
        }
        failure{
            echo "This section run when pipeline failure"
        }
    }
}